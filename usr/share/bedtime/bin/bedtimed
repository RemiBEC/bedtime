#!/usr/bin/perl

# This is the daemon script for the bedtime application.
# It listens on port 5000 and dispatches a script from
# the /usr/share/bedtime/bin directory to perform actions
# that are privileged and/or not suitable for the PHP scripts
# that make up the website part of the application

# Standard directives with socket specific modules
use strict;
use warnings;
use POSIX qw( setsid );
use IO::Socket;

# Open the socket on TCP 5000
my $socket = IO::Socket::INET->new(
   'Proto'     => 'tcp',
   'LocalPort' => 5000,
   'Listen'    => 5,
   'Reuse'     => 1,
);
# Drop out if all is not well
die "Cannot open socket on port 5000: $!" unless ($socket);

# Disconnect from the terminal
chdir '/' or die "Cannot cd to /: $!";
open STDIN, '/dev/null' or die "Cannot read /dev/null: $!";
open STDOUT, '>/dev/null' or die "Cannot write /dev/null: $!";
# Fork to the daemon
defined(my $pid = fork) or die "Cannot fork: $!";
# and kill the parent. This leaves the daemon detached
exit if $pid;
setsid or die "Cannot start new session: $!";
open STDERR, '>&STDOUT' or exec("logger Cannot duplicate output: $!");

# Write the process ID
open  PID, ">/var/run/bedtimed.pid" or exec("logger Cannot open pid file: $!");
print PID  "$$\n" or exec("logger Cannot write to pid file: $!");
close PID;

# Launch scripts according to input:
# u = update iptables
# d = dhcp leases to db
# n = upgrade from tarball
# o = downgrade to rpm
# s = survey the network
# p = password into conf
# t = timezone config
# r = restore database
# k = kill stale mac
# c = change root pass
while ( my $client = $socket->accept() ) {
   chomp ( my $input = <$client> );
   # Echo the input to the log/journal
   # Yes, this is insecure but since the only login is root
   # Having a child read the logs is the least of your problems
   system("logger socket 5000 received $input");
   system("/usr/share/bedtime/bin/update_ipt") if $input =~ /^u/;
   system("/usr/share/bedtime/bin/dhcp_slurp") if $input =~ /^d/;
   system("/usr/share/bedtime/bin/new_ver")    if $input =~ /^n/;
   system("/usr/share/bedtime/bin/old_ver")    if $input =~ /^o/;
   if ($input =~ /^s/) {
      $input =~ s/^s//;
      system("/usr/share/bedtime/bin/survey_net $input")
   } elsif ($input =~ /^p/) {
      $input =~ s/^p//;
      system("/usr/share/bedtime/bin/cfsetup $input");
      system("/usr/share/bedtime/bin/ifsetup");
      system("/usr/share/bedtime/bin/dhsetup");
   } elsif ($input =~ /^t/) {
      $input =~ s/^t//;
      system("ln -sf /usr/share/zoneinfo/$input /etc/localtime");
   } elsif ($input =~ /^r/) {
      $input =~ s/^r//;
      system("/usr/share/bedtime/bin/restore $input");
   } elsif ($input =~ /^k/) {
      $input =~ s/^k//;
      system("/usr/share/bedtime/bin/killmac $input");
   } elsif ($input =~ /^c/) {
      $input =~ s/^c//;
      system("echo \"root:$input\" | chpasswd");
   }
   # Close the socket connection
   close $client;
}
